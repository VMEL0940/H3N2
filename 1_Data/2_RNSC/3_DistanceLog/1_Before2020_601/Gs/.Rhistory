DomExtVac2_F %>% unique
AllG_NS_V3$DomExtVac2_F %>% unique
AllG_NS_V3$DomExtVac2 %>% unique
AllG_NS_V3$vaccine_period_Bi %>% unique
AllG_NS_V3$subtMRCA_1stDesc %>% unique
AllG_NS_V2$subtMRCA_1stDesc
subdata$subtMRCA_1stDesc
is.na(AllG_NS_V3$DomExtVac2)
is.na(AllG_NS_V3$DomExtVac2) %>% unique
unique(AllG_NS_V3$subtMRCA_1stDesc )
AllG_NS_V3$DomExtVac2 <- ifelse(AllG_NS_V3$vaccine_period_Bi == "VP" & AllG_NS_V3$subtMRCA_1stDesc == 0, 0,
ifelse(AllG_NS_V3$vaccine_period_Bi == "VP" & AllG_NS_V3$subtMRCA_1stDesc == 1, 1,
ifelse(is.na(AllG_NS_V3$subtMRCA_1stDesc), 2, 2)))
AllG_NS_V3$DomExtVac2_F <- factor(AllG_NS_V3$DomExtVac2,
levels = c(0,1,2),
labels = c("Extinct","Dominant","After Vaccine"))
VP3Col2 <- c("#000000","#96fd29","#999900")
AllG_NS_V3 <- AllG_NS_V3[!is.na(AllG_NS_V3$Gene),]
AllG_NS_V3 %>%
ggplot() +
geom_jitter(aes(x= DomExtVac2_F, y= Nmedian), width = 0.25, size = 0.50, color = "gray40") +
geom_boxplot(aes(x= DomExtVac2_F, y = Nmedian, color = DomExtVac2_F), size = 1.1, outlier.shape = NA, alpha = 0) +
xlab("Dominance") +
ylab("Nonsynonymous genetic distance")+
facet_wrap( ~ Gene, nrow = 2, ncol = 4) +
scale_color_manual(values = VP3Col2, guide="none") +
theme_bw()
AllG_NS_V3$DomExtVac2_F %>% unique
AllG_NS_V3 <- AllG_NS_V3[!is.na(AllG_NS_V3$Gene),]
AllG_NS_V3 %>%
ggplot() +
geom_jitter(aes(x= DomExtVac2_F, y= Nmedian), width = 0.25, size = 0.50, color = "gray40")
AllG_NS_V3$DomExtVac2_F %>% unique
AllG_NS_V3$DomExtVac2 %>% unique
AllG_NS_V3$DomExtVac2 <- ifelse(AllG_NS_V3$vaccine_period_Bi == "VP" & AllG_NS_V3$subtMRCA_1stDesc == 0, 0,
ifelse(AllG_NS_V3$vaccine_period_Bi == "VP" & AllG_NS_V3$subtMRCA_1stDesc == 1, 1,
ifelse(is.na(AllG_NS_V3$subtMRCA_1stDesc), 2, 2)))
AllG_NS_V3$DomExtVac2 %>% unique
AllG_NS_V3 <- AllG_NS_V3 %>%
mutate(DomExtVac2 = case_when(
vaccine_period_Bi == "VP" & subtMRCA_1stDesc == 0 ~ 0,
vaccine_period_Bi == "VP" & subtMRCA_1stDesc == 1 ~ 1,
is.na(subtMRCA_1stDesc) ~ 2,
TRUE ~ 2
))
AllG_NS_V3$DomExtVac2 %>% unique
AllG_NS_V3$DomExtVac2_F <- factor(AllG_NS_V3$DomExtVac2,
levels = c(0,1,2),
labels = c("Extinct","Dominant","After Vaccine"))
VP3Col2 <- c("#000000","#96fd29","#999900")
AllG_NS_V3 <- AllG_NS_V3[!is.na(AllG_NS_V3$Gene),]
AllG_NS_V3 %>%
ggplot() +
geom_jitter(aes(x= DomExtVac2_F, y= Nmedian), width = 0.25, size = 0.50, color = "gray40") +
geom_boxplot(aes(x= DomExtVac2_F, y = Nmedian, color = DomExtVac2_F), size = 1.1, outlier.shape = NA, alpha = 0) +
xlab("Dominance") +
ylab("Nonsynonymous genetic distance")+
facet_wrap( ~ Gene, nrow = 2, ncol = 4) +
scale_color_manual(values = VP3Col2, guide="none") +
theme_bw()
### Influ H3N2 GenDist Proj ###
## Package ##
library(tidyverse)
library(factoextra)
library(FactoMineR)
library(ggpubr)
library(corrplot)
library(igraph)
library(Hmisc)
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
## Set working directory ##
setwd("/Users/sangyi/Desktop/H3N2/1_Data/2_RNSC/3_DistanceLog/1_Before2020_601/Gs")
## Data import ##
G1_NS <- read.table("G1_NS_2.txt", header = T, na.strings = "")
G2_NS <- read.table("G2_NS_2.txt", header = T, na.strings = "")
G3_NS <- read.table("G3_NS_2.txt", header = T, na.strings = "")
G4_NS <- read.table("G4_NS_2.txt", header = T, na.strings = "")
G5_NS <- read.table("G5_NS_2.txt", header = T, na.strings = "")
G6_NS <- read.table("G6_NS_2.txt", header = T, na.strings = "")
G7_NS <- read.table("G7_NS_2.txt", header = T, na.strings = "")
G8_NS <- read.table("G8_NS_2.txt", header = T, na.strings = "")
G9_NS <- read.table("G9_NS_2.txt", header = T, na.strings = "")
G1_NS$Gene <- factor(G1_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G2_NS$Gene <- factor(G2_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G3_NS$Gene <- factor(G3_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G4_NS$Gene <- factor(G4_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G5_NS$Gene <- factor(G5_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G6_NS$Gene <- factor(G6_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G7_NS$Gene <- factor(G7_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G8_NS$Gene <- factor(G8_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G9_NS$Gene <- factor(G9_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
## combine all data
AllG_NS <- rbind(G1_NS, G2_NS, G3_NS, G4_NS, G5_NS,
G6_NS, G7_NS, G8_NS, G9_NS)
GeneCol <- c("#C780E8", "#9D94FF","#59ADF6","#08CAD1","#42D6A4","#F8F38D","#FFB480","#FF6961")
## Let's use Median!! ##
G2_NS <- G2_NS %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE))
G2_NS <- G2_NS %>% select(vaccineStrain, compareStrain, Gene, Nmedian) %>% unique
## Build Correlation matrix - G2##
N_G2_Ndist_spread <- spread(G2_NS, key = Gene, value = Nmedian)
## Correlation matrix - r and p
res2 <- rcorr(as.matrix(N_G2_Ndist_spread[,c(3:10)]))
G2_NS_Cor <- flattenCorrMatrix(res2$r, res2$P)
colnames(G2_NS_Cor) <- c("Gene1", "Gene2", "Correlation", "p")
G2_NS_Cor <- G2_NS_Cor %>%
filter(Correlation != 1 & p < 0.05)
G2_NS_Cor$GenePair <- paste(G2_NS_Cor$Gene1, "-", G2_NS_Cor$Gene2)
G2_NS_Cor %>%
ggplot(aes(x=reorder(GenePair, Correlation), y=Correlation)) +
geom_bar(stat = "identity") +
geom_hline(yintercept= 0.3, linetype=4, color='gray', size=0.75) +
geom_hline(yintercept= -0.3, linetype=4, color='gray', size=0.75) +
geom_hline(yintercept= 0.6, linetype=3, color='orange2', size=1) +
geom_hline(yintercept= -0.6, linetype=3, color='orange2', size=1) +
ylim(-1,1) +
xlab("Gene Pair") +
coord_flip() +
theme_bw()
## Filter Corr > 0.3 ##
G2_NS_Cor_03 <- G2_NS_Cor %>%
filter(Correlation >= 0.3)
actors <- data.frame(name=c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
relations <- data.frame(from= G2_NS_Cor_03$Gene1,
to= G2_NS_Cor_03$Gene2,
weight = G2_NS_Cor_03$Correlation)
g <- graph_from_data_frame(relations, directed=F, vertices=actors)
E(g)$width <- E(g)$weight*2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
plot(g, vertex.size=30, vertex.color=GeneCol, vertex.label.color="black", vertex.label.family = "sans",
vertex.frame.width = 0.75)
## Let's use Median!! ##
G2_NS <- G2_NS %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE))
plot(g, vertex.size=30, vertex.color=GeneCol, vertex.label.color="black", vertex.label.family = "sans",
vertex.frame.width = 0.75)
########## for G1 ###########
## Let's use Median!! ##
G1_NS <- G1_NS %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE))
G1_NS <- G1_NS %>% select(vaccineStrain, compareStrain, Gene, Nmedian) %>% unique
## Build Correlation matrix - G1##
N_G1_Ndist_spread <- spread(G1_NS, key = Gene, value = Nmedian)
## Correlation matrix - r and p
res2 <- rcorr(as.matrix(N_G1_Ndist_spread[,c(3:10)]))
G1_NS_Cor <- flattenCorrMatrix(res2$r, res2$P)
colnames(G1_NS_Cor) <- c("Gene1", "Gene2", "Correlation", "p")
G1_NS_Cor <- G1_NS_Cor %>%
filter(Correlation != 1 & p < 0.05)
G1_NS_Cor$GenePair <- paste(G1_NS_Cor$Gene1, "-", G1_NS_Cor$Gene2)
G1_NS_Cor %>%
ggplot(aes(x=reorder(GenePair, Correlation), y=Correlation)) +
geom_bar(stat = "identity") +
geom_hline(yintercept= 0.3, linetype=4, color='gray', size=0.75) +
geom_hline(yintercept= -0.3, linetype=4, color='gray', size=0.75) +
geom_hline(yintercept= 0.6, linetype=3, color='orange2', size=1) +
geom_hline(yintercept= -0.6, linetype=3, color='orange2', size=1) +
ylim(-1,1) +
xlab("Gene Pair") +
coord_flip() +
theme_bw()
## Filter Corr > 0.3 ##
G1_NS_Cor_03 <- G1_NS_Cor %>%
filter(Correlation >= 0.3)
actors <- data.frame(name=c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
relations <- data.frame(from= G1_NS_Cor_03$Gene1,
to= G1_NS_Cor_03$Gene2,
weight = G1_NS_Cor_03$Correlation)
g <- graph_from_data_frame(relations, directed=F, vertices=actors)
E(g)$width <- E(g)$weight*2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
plot(g, vertex.size=30, vertex.color=GeneCol, vertex.label.color="black", vertex.label.family = "sans",
vertex.frame.width = 0.75)
getwd()
library(dplyr)
library(tidyr)    # spread가 필요하면 tidyr 로드
library(Hmisc)
library(igraph)
# 지정한 색상 팔레트
GeneCol <- c("#C780E8", "#9D94FF","#59ADF6","#08CAD1",
"#42D6A4","#F8F38D","#FFB480","#FF6961")
# 출력 폴더
output_dir <- "network_svg"
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
# 유전자 목록(정점 순서 고정)
gene_order <- c("PB2","PB1","PA","HA","NP","NA","M","NS")
for (i in 1:9) {
message("Processing G", i, " ...")
df_name <- paste0("G", i, "_NS")
if (!exists(df_name)) {
warning(df_name, " 데이터가 없습니다. 건너뜁니다.")
next
}
df <- get(df_name)
# Nmedian(이름만 median, 실제 계산은 mean 그대로 유지)
df <- df %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE)) %>%
select(vaccineStrain, compareStrain, Gene, Nmedian) %>%
distinct()
# wide 변환
N_dist <- tidyr::spread(df, key = Gene, value = Nmedian)
# 필요한 유전자 컬럼만 안전하게 선택
keep_cols <- intersect(colnames(N_dist), gene_order)
if (length(keep_cols) < 2) {
warning("유효한 유전자 컬럼이 부족합니다. 건너뜁니다: G", i)
next
}
# 상관계수 + p-value
res2 <- rcorr(as.matrix(N_dist[, keep_cols]))
CorMat <- flattenCorrMatrix(res2$r, res2$P)
colnames(CorMat) <- c("Gene1", "Gene2", "Correlation", "p")
CorMat <- CorMat %>%
filter(Correlation != 1, p < 0.05)
# 임계치 필터 (>= 0.3)
CorMat03 <- CorMat %>% filter(Correlation >= 0.3)
# 정점/간선
actors <- data.frame(name = gene_order)
relations <- data.frame(
from = CorMat03$Gene1,
to   = CorMat03$Gene2,
weight = CorMat03$Correlation
)
g <- graph_from_data_frame(relations, directed = FALSE, vertices = actors)
# 간선 속성
if (ecount(g) > 0) {
E(g)$width <- E(g)$weight * 2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
}
# 레이아웃(재현성 위해 seed 고정)
set.seed(123)
lay <- layout_with_fr(g)
# SVG 저장
svg_file <- file.path(output_dir, sprintf("G%d_network.svg", i))
svg(svg_file, width = 7, height = 5)
plot(
g,
layout = lay,
vertex.size = 30,
vertex.color = GeneCol,         # 지정 팔레트 사용
vertex.label.color = "black",
vertex.label.family = "sans",
vertex.frame.width = 0.75
)
dev.off()
message("Saved: ", svg_file)
}
for (i in 1:9) {
message("Processing G", i, " ...")
df_name <- paste0("G", i, "_NS")
if (!exists(df_name)) {
warning(df_name, " 데이터가 없습니다. 건너뜁니다.")
next
}
df <- get(df_name)
df <- df %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(Nmedian, na.rm = TRUE)) %>%
select(vaccineStrain, compareStrain, Gene, Nmedian) %>%
distinct()
N_dist <- tidyr::spread(df, key = Gene, value = Nmedian)
keep_cols <- intersect(colnames(N_dist), gene_order)
res2 <- rcorr(as.matrix(N_dist[, keep_cols]))
CorMat <- flattenCorrMatrix(res2$r, res2$P)
colnames(CorMat) <- c("Gene1", "Gene2", "Correlation", "p")
CorMat <- CorMat %>%
filter(Correlation != 1, p < 0.05)
CorMat03 <- CorMat %>% filter(Correlation >= 0.3)
actors <- data.frame(name = gene_order)
relations <- data.frame(
from = CorMat03$Gene1,
to   = CorMat03$Gene2,
weight = CorMat03$Correlation
)
g <- graph_from_data_frame(relations, directed = FALSE, vertices = actors)
if (ecount(g) > 0) {
E(g)$width <- E(g)$weight * 2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
}
set.seed(123)
lay <- layout_with_fr(g)
svg_file <- file.path(output_dir, sprintf("G%d_network.svg", i))
svg(svg_file, width = 7, height = 5)
plot(
g,
layout = lay,
vertex.size = 30,
vertex.color = GeneCol,
vertex.label.color = "black",
vertex.label.family = "sans",
vertex.frame.width = 0.75
)
dev.off()
message("Saved: ", svg_file)
}
for (i in 1:9) {
message("Processing G", i, " ...")
df_name <- paste0("G", i, "_NS")
if (!exists(df_name)) {
warning(df_name, " 데이터가 없습니다. 건너뜁니다.")
next
}
df <- get(df_name)
df <- df %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE)) %>%
select(vaccineStrain, compareStrain, Gene, Nmedian) %>%
distinct()
N_dist <- tidyr::spread(df, key = Gene, value = Nmedian)
keep_cols <- intersect(colnames(N_dist), gene_order)
res2 <- rcorr(as.matrix(N_dist[, keep_cols]))
CorMat <- flattenCorrMatrix(res2$r, res2$P)
colnames(CorMat) <- c("Gene1", "Gene2", "Correlation", "p")
CorMat <- CorMat %>%
filter(Correlation != 1, p < 0.05)
CorMat03 <- CorMat %>% filter(Correlation >= 0.3)
actors <- data.frame(name = gene_order)
relations <- data.frame(
from = CorMat03$Gene1,
to   = CorMat03$Gene2,
weight = CorMat03$Correlation
)
g <- graph_from_data_frame(relations, directed = FALSE, vertices = actors)
if (ecount(g) > 0) {
E(g)$width <- E(g)$weight * 2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
}
set.seed(123)
lay <- layout_with_fr(g)
svg_file <- file.path(output_dir, sprintf("G%d_network.svg", i))
svg(svg_file, width = 7, height = 5)
plot(
g,
layout = lay,
vertex.size = 30,
vertex.color = GeneCol,
vertex.label.color = "black",
vertex.label.family = "sans",
vertex.frame.width = 0.75
)
dev.off()
message("Saved: ", svg_file)
}
########## for G2 ###########
G2_NS %>% head
G1_NS %>% head
G9_NS %>% head
## Data import ##
G1_NS <- read.table("G1_NS_2.txt", header = T, na.strings = "")
G2_NS <- read.table("G2_NS_2.txt", header = T, na.strings = "")
G3_NS <- read.table("G3_NS_2.txt", header = T, na.strings = "")
G4_NS <- read.table("G4_NS_2.txt", header = T, na.strings = "")
G5_NS <- read.table("G5_NS_2.txt", header = T, na.strings = "")
G6_NS <- read.table("G6_NS_2.txt", header = T, na.strings = "")
G7_NS <- read.table("G7_NS_2.txt", header = T, na.strings = "")
G8_NS <- read.table("G8_NS_2.txt", header = T, na.strings = "")
G9_NS <- read.table("G9_NS_2.txt", header = T, na.strings = "")
G1_NS$Gene <- factor(G1_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G2_NS$Gene <- factor(G2_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G3_NS$Gene <- factor(G3_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G4_NS$Gene <- factor(G4_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G5_NS$Gene <- factor(G5_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G6_NS$Gene <- factor(G6_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G7_NS$Gene <- factor(G7_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G8_NS$Gene <- factor(G8_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
G9_NS$Gene <- factor(G9_NS$Gene, levels = c("PB2", "PB1", "PA", "HA",
"NP", "NA", "M", "NS"))
## combine all data
AllG_NS <- rbind(G1_NS, G2_NS, G3_NS, G4_NS, G5_NS,
G6_NS, G7_NS, G8_NS, G9_NS)
GeneCol <- c("#C780E8", "#9D94FF","#59ADF6","#08CAD1","#42D6A4","#F8F38D","#FFB480","#FF6961")
library(dplyr)
library(tidyr)
library(Hmisc)
library(igraph)
output_dir <- "network_svg"
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
gene_order <- c("PB2","PB1","PA","HA","NP","NA","M","NS")
for (i in 1:9) {
message("Processing G", i, " ...")
df_name <- paste0("G", i, "_NS")
if (!exists(df_name)) {
warning(df_name, " 데이터가 없습니다. 건너뜁니다.")
next
}
df <- get(df_name)
df <- df %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE)) %>%
select(vaccineStrain, compareStrain, Gene, Nmedian) %>%
distinct()
N_dist <- tidyr::spread(df, key = Gene, value = Nmedian)
keep_cols <- intersect(colnames(N_dist), gene_order)
res2 <- rcorr(as.matrix(N_dist[, keep_cols]))
CorMat <- flattenCorrMatrix(res2$r, res2$P)
colnames(CorMat) <- c("Gene1", "Gene2", "Correlation", "p")
CorMat <- CorMat %>%
filter(Correlation != 1, p < 0.05)
CorMat03 <- CorMat %>% filter(Correlation >= 0.3)
actors <- data.frame(name = gene_order)
relations <- data.frame(
from = CorMat03$Gene1,
to   = CorMat03$Gene2,
weight = CorMat03$Correlation
)
g <- graph_from_data_frame(relations, directed = FALSE, vertices = actors)
if (ecount(g) > 0) {
E(g)$width <- E(g)$weight * 2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
}
set.seed(123)
lay <- layout_with_fr(g)
svg_file <- file.path(output_dir, sprintf("G%d_network.svg", i))
svg(svg_file, width = 7, height = 5)
plot(
g,
layout = lay,
vertex.size = 30,
vertex.color = GeneCol,
vertex.label.color = "black",
vertex.label.family = "sans",
vertex.frame.width = 0.75
)
dev.off()
message("Saved: ", svg_file)
}
library(svglite)
for (i in 1:9) {
message("Processing G", i, " ...")
df_name <- paste0("G", i, "_NS")
if (!exists(df_name)) {
warning(df_name, " 데이터가 없습니다. 건너뜁니다.")
next
}
df <- get(df_name)
df <- df %>%
group_by(compareStrain, Gene) %>%
mutate(Nmedian = mean(N2, na.rm = TRUE)) %>%
select(vaccineStrain, compareStrain, Gene, Nmedian) %>%
distinct()
N_dist <- tidyr::spread(df, key = Gene, value = Nmedian)
keep_cols <- intersect(colnames(N_dist), gene_order)
res2 <- rcorr(as.matrix(N_dist[, keep_cols]))
CorMat <- flattenCorrMatrix(res2$r, res2$P)
colnames(CorMat) <- c("Gene1", "Gene2", "Correlation", "p")
CorMat <- CorMat %>%
filter(Correlation != 1, p < 0.05)
CorMat03 <- CorMat %>% filter(Correlation >= 0.3)
actors <- data.frame(name = gene_order)
relations <- data.frame(
from = CorMat03$Gene1,
to   = CorMat03$Gene2,
weight = CorMat03$Correlation
)
g <- graph_from_data_frame(relations, directed = FALSE, vertices = actors)
if (ecount(g) > 0) {
E(g)$width <- E(g)$weight * 2.5^2
E(g)[E(g)$weight >= 0.3 & E(g)$weight < 0.595]$color <- "#ABB2B9"
E(g)[E(g)$weight >= 0.595]$color <- "#F5B041"
}
set.seed(123)
lay <- layout_with_fr(g)
svg_file <- file.path(output_dir, sprintf("G%d_network.svg", i))
svglite::svglite(svg_file, width = 7, height = 5)  # svg() 대신 이 줄
plot(
g,
layout = lay,
vertex.size = 30,
vertex.color = GeneCol,
vertex.label.color = "black",
vertex.label.family = "sans",
vertex.frame.width = 0.75
)
dev.off()
message("Saved: ", svg_file)
}
